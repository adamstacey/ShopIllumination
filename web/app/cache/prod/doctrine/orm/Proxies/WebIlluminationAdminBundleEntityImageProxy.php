<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class WebIlluminationAdminBundleEntityImageProxy extends \WebIllumination\AdminBundle\Entity\Image implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function create()
    {
        $this->__load();
        return parent::create();
    }

    public function update()
    {
        $this->__load();
        return parent::update();
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setObjectId($objectId)
    {
        $this->__load();
        return parent::setObjectId($objectId);
    }

    public function getObjectId()
    {
        $this->__load();
        return parent::getObjectId();
    }

    public function setObjectType($objectType)
    {
        $this->__load();
        return parent::setObjectType($objectType);
    }

    public function getObjectType()
    {
        $this->__load();
        return parent::getObjectType();
    }

    public function setImageType($imageType)
    {
        $this->__load();
        return parent::setImageType($imageType);
    }

    public function getImageType()
    {
        $this->__load();
        return parent::getImageType();
    }

    public function setLocale($locale)
    {
        $this->__load();
        return parent::setLocale($locale);
    }

    public function getLocale()
    {
        $this->__load();
        return parent::getLocale();
    }

    public function setTitle($title)
    {
        $this->__load();
        return parent::setTitle($title);
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setAlignment($alignment)
    {
        $this->__load();
        return parent::setAlignment($alignment);
    }

    public function getAlignment()
    {
        $this->__load();
        return parent::getAlignment();
    }

    public function setLink($link)
    {
        $this->__load();
        return parent::setLink($link);
    }

    public function getLink()
    {
        $this->__load();
        return parent::getLink();
    }

    public function setDisplayOrder($displayOrder)
    {
        $this->__load();
        return parent::setDisplayOrder($displayOrder);
    }

    public function getDisplayOrder()
    {
        $this->__load();
        return parent::getDisplayOrder();
    }

    public function setOriginalPath($originalPath)
    {
        $this->__load();
        return parent::setOriginalPath($originalPath);
    }

    public function getOriginalPath()
    {
        $this->__load();
        return parent::getOriginalPath();
    }

    public function setThumbnailPath($thumbnailPath)
    {
        $this->__load();
        return parent::setThumbnailPath($thumbnailPath);
    }

    public function getThumbnailPath()
    {
        $this->__load();
        return parent::getThumbnailPath();
    }

    public function getThumbnailWidth()
    {
        $this->__load();
        return parent::getThumbnailWidth();
    }

    public function getThumbnailHeight()
    {
        $this->__load();
        return parent::getThumbnailHeight();
    }

    public function setMediumPath($mediumPath)
    {
        $this->__load();
        return parent::setMediumPath($mediumPath);
    }

    public function getMediumPath()
    {
        $this->__load();
        return parent::getMediumPath();
    }

    public function getMediumWidth()
    {
        $this->__load();
        return parent::getMediumWidth();
    }

    public function getMediumHeight()
    {
        $this->__load();
        return parent::getMediumHeight();
    }

    public function setLargePath($largePath)
    {
        $this->__load();
        return parent::setLargePath($largePath);
    }

    public function getLargePath()
    {
        $this->__load();
        return parent::getLargePath();
    }

    public function getLargeWidth()
    {
        $this->__load();
        return parent::getLargeWidth();
    }

    public function getLargeHeight()
    {
        $this->__load();
        return parent::getLargeHeight();
    }

    public function setCreatedAt($createdAt)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function setUpdatedAt($updatedAt)
    {
        $this->__load();
        return parent::setUpdatedAt($updatedAt);
    }

    public function getUpdatedAt()
    {
        $this->__load();
        return parent::getUpdatedAt();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'objectId', 'objectType', 'imageType', 'locale', 'title', 'description', 'alignment', 'link', 'displayOrder', 'originalPath', 'thumbnailPath', 'mediumPath', 'largePath', 'createdAt', 'updatedAt');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}