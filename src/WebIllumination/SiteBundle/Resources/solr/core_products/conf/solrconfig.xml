<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--Solr config for products core-->

<config>
    <luceneMatchVersion>LUCENE_36</luceneMatchVersion>

    <!-- lib directives can be used to instruct Solr to load an Jars
         identified and use them to resolve any "plugins" specified in
         your solrconfig.xml or schema.xml (ie: Analyzers, Request
         Handlers, etc...).
      -->
    <lib dir="../../dist/" regex="apache-solr-cell-\d.*\.jar"/>
    <lib dir="../../contrib/extraction/lib" regex=".*\.jar"/>

    <lib dir="../../dist/" regex="apache-solr-clustering-\d.*\.jar"/>
    <lib dir="../../contrib/clustering/lib/" regex=".*\.jar"/>

    <lib dir="../../dist/" regex="apache-solr-dataimporthandler-\d.*\.jar"/>
    <lib dir="../../contrib/dataimporthandler/lib/" regex=".*\.jar"/>

    <lib dir="../../dist/" regex="apache-solr-langid-\d.*\.jar"/>
    <lib dir="../../contrib/langid/lib/" regex=".*\.jar"/>

    <lib dir="../../dist/" regex="apache-solr-velocity-\d.*\.jar"/>
    <lib dir="../../contrib/velocity/lib" regex=".*\.jar"/>

    <!-- Data Directory

         Used to specify an alternate directory to hold all index data
         other than the default ./data under the Solr home.  If
         replication is in use, this should match the replication
         configuration.
      -->
    <dataDir>${solr.data.dir:}</dataDir>


    <!--  The DirectoryFactory to use for indexes.
          solr.StandardDirectoryFactory, the default, is filesystem based.
          solr.RAMDirectoryFactory is memory based, not persistent, and doesn't work with replication. -->
    <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.StandardDirectoryFactory}"/>

    <updateHandler class="solr.DirectUpdateHandler2"/>

    <requestDispatcher handleSelect="true">
        <requestParsers enableRemoteStreaming="false" multipartUploadLimitInKB="2048"/>
    </requestDispatcher>

    <requestHandler name="standard" class="solr.StandardRequestHandler" default="true"/>
    <requestHandler name="/update" class="solr.XmlUpdateRequestHandler"/>
    <requestHandler name="/admin/" class="org.apache.solr.handler.admin.AdminHandlers"/>

    <!-- config for the admin interface -->
    <admin>
        <defaultQuery>solr</defaultQuery>
    </admin>

    <query>
        <!-- Maximum number of clauses in a boolean query... can affect range
             or wildcard queries that expand to big boolean queries.
             An exception is thrown if exceeded.
        -->
        <maxBooleanClauses>1024</maxBooleanClauses>
        <!-- Cache used by SolrIndexSearcher for filters (DocSets),
             unordered sets of *all* documents that match a query.
             When a new searcher is opened, its caches may be prepopulated
             or "autowarmed" using data from caches in the old searcher.
             autowarmCount is the number of items to prepopulate.  For LRUCache,
             the autowarmed items will be the most recently accessed items.
           Parameters:
             class - the SolrCache implementation (currently only LRUCache)
             size - the maximum number of entries in the cache
             initialSize - the initial capacity (number of entries) of
               the cache.  (seel java.util.HashMap)
             autowarmCount - the number of entries to prepopulate from
               and old cache.
             -->
        <filterCache
                class="solr.LRUCache"
                size="512"
                initialSize="512"
                autowarmCount="256"/>

        <!-- queryResultCache caches results of searches - ordered lists of
              document ids (DocList) based on a query, a sort, and the range
              of documents requested.  -->
        <queryResultCache
                class="solr.LRUCache"
                size="512"
                initialSize="512"
                autowarmCount="256"/>

        <!-- documentCache caches Lucene Document objects (the stored fields for each document).
             Since Lucene internal document ids are transient, this cache will not be autowarmed.  -->
        <documentCache
                class="solr.LRUCache"
                size="512"
                initialSize="512"
                autowarmCount="0"/>

        <!-- Example of a generic cache.  These caches may be accessed by name
             through SolrIndexSearcher.getCache().cacheLookup(), and cacheInsert().
             The purpose is to enable easy caching of user/application level data.
             The regenerator argument should be specified as an implementation
             of solr.search.CacheRegenerator if autowarming is desired.  -->
        <!--
        <cache name="myUserCache"
          class="solr.LRUCache"
          size="4096"
          initialSize="1024"
          autowarmCount="1024"
          regenerator="org.mycompany.mypackage.MyRegenerator"
          />
        -->

        <!-- An optimization that attempts to use a filter to satisfy a search.
             If the requested sort does not include a score, then the filterCache
             will be checked for a filter matching the query.  If found, the filter
             will be used as the source of document ids, and then the sort will be
             applied to that.
          -->
        <useFilterForSortedQuery>true</useFilterForSortedQuery>

        <!-- Result Window Size

             An optimization for use with the queryResultCache.  When a search
             is requested, a superset of the requested number of document ids
             are collected.  For example, if a search for a particular query
             requests matching documents 10 through 19, and queryWindowSize
             is 50, then documents 0 through 49 will be collected and cached.
             Any further requests in that range can be satisfied via the cache.
          -->
        <queryResultWindowSize>20</queryResultWindowSize>

        <!-- Maximum number of documents to cache for any entry in the
             queryResultCache.
          -->
        <queryResultMaxDocsCached>200</queryResultMaxDocsCached>


        <!-- This entry enables an int hash representation for filters (DocSets)
             when the number of items in the set is less than maxSize. For smaller
             sets, this representation is more memory efficient, more efficient to
             iterate over, and faster to take intersections.
         -->
        <HashDocSet maxSize="3000" loadFactor="0.75"/>


        <!-- boolToFilterOptimizer converts boolean clauses with zero boost
             cached filters if the number of docs selected by the clause exceeds the
             threshold (represented as a fraction of the total index)
        -->
        <boolTofilterOptimizer enabled="true" cacheSize="32" threshold=".05"/>

        <!-- Lazy field loading will attempt to read only parts of documents on disk that are
             requested.  Enabling should be faster if you aren't retrieving all stored fields.
        -->
        <enableLazyFieldLoading>false</enableLazyFieldLoading>

        <!-- Query Related Event Listeners

             Various IndexSearcher related events can trigger Listeners to
             take actions.

             newSearcher - fired whenever a new searcher is being prepared
             and there is a current searcher handling requests (aka
             registered).  It can be used to prime certain caches to
             prevent long request times for certain requests.

             firstSearcher - fired whenever a new searcher is being
             prepared but there is no current registered searcher to handle
             requests or to gain autowarming data from.


          -->
        <!-- QuerySenderListener takes an array of NamedList and executes a
             local query request for each NamedList in sequence.
          -->
        <listener event="newSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
                <!--
                   <lst><str name="q">solr</str><str name="sort">price asc</str></lst>
                   <lst><str name="q">rocks</str><str name="sort">weight asc</str></lst>
                  -->
            </arr>
        </listener>
        <listener event="firstSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
                <lst>
                    <str name="q">static firstSearcher warming in solrconfig.xml</str>
                </lst>
            </arr>
        </listener>

        <!-- Use Cold Searcher

             If a search request comes in and there is no current
             registered searcher, then immediately register the still
             warming searcher and use it.  If "false" then all requests
             will block until the first searcher is done warming.
          -->
        <useColdSearcher>false</useColdSearcher>

        <!-- Max Warming Searchers

             Maximum number of searchers that may be warming in the
             background concurrently.  An error is returned if this limit
             is exceeded.

             Recommend values of 1-2 for read-only slaves, higher for
             masters w/o cache warming.
          -->
        <maxWarmingSearchers>2</maxWarmingSearchers>
    </query>

    <!-- Request Dispatcher

           This section contains instructions for how the SolrDispatchFilter
           should behave when processing requests for this SolrCore.

           If you wish to regain use of /select?qt=... style request handler
           dispatching, then first add handleSelect="true" to
           <requestDispatcher>. Then change the name of the request handler
           named "/select" to something else without a leading "/", such as
           simply "select" and add default="true" to it.
       -->
    <requestDispatcher>
        <!-- Request Parsing

               These settings indicate how Solr Requests may be parsed, and
               what restrictions may be placed on the ContentStreams from
               those requests

               enableRemoteStreaming - enables use of the stream.file
               and stream.url parameters for specifying remote streams.
               SearchRequestHandler won't fetch it, but some others do.

               multipartUploadLimitInKB - specifies the max size of
               Multipart File Uploads that Solr will allow in a Request.

               *** WARNING ***
               The settings below authorize Solr to fetch remote files, You
               should make sure your system has some authentication before
               using enableRemoteStreaming="true"

            -->
        <requestParsers enableRemoteStreaming="true"
                        multipartUploadLimitInKB="2048000"/>
        <!-- HTTP Caching

               Set HTTP caching related parameters (for proxy caches and clients).

               The options below instruct Solr not to output any HTTP Caching
               related headers
            -->
        <httpCaching never304="true"/>
    </requestDispatcher>

    <!-- Spell Check

            The spell check component can return a list of alternative spelling
            suggestions.

            http://wiki.apache.org/solr/SpellCheckComponent
         -->
    <searchComponent name="spellcheck" class="solr.SpellCheckComponent">

        <lst name="spellchecker">
            <!--
                 Optional, it is required when more than one spellchecker is configured.
                 Select non-default name with spellcheck.dictionary in request handler.
            -->
            <str name="name">default</str>
            <!-- The classname is optional, defaults to IndexBasedSpellChecker -->
            <str name="classname">solr.IndexBasedSpellChecker</str>
            <!--
                     Load tokens from the following field for spell checking,
                     analyzer for the field's type as defined in schema.xml are used
            -->
            <str name="field">spell</str>
            <!-- Optional, by default use in-memory index (RAMDirectory) -->
            <str name="spellcheckIndexDir">./spellchecker</str>
            <!-- Set the accuracy (float) to be used for the suggestions. Default is 0.5 -->
            <str name="accuracy">0.7</str>
            <!-- Require terms to occur in 1/100th of 1% of documents in order to be included in the dictionary -->
            <float name="thresholdTokenFrequency">.0001</float>
        </lst>
        <!-- Example of using different distance measure -->
        <lst name="spellchecker">
            <str name="name">jarowinkler</str>
            <str name="field">lowerfilt</str>
            <!-- Use a different Distance Measure -->
            <str name="distanceMeasure">org.apache.lucene.search.spell.JaroWinklerDistance</str>
            <str name="spellcheckIndexDir">./spellchecker</str>

        </lst>

        <!-- This field type's analyzer is used by the QueryConverter to tokenize the value for "q" parameter -->
        <str name="queryAnalyzerFieldType">textSpell</str>
    </searchComponent>
    <!--
      The SpellingQueryConverter to convert raw (CommonParams.Q) queries into tokens.  Uses a simple regular expression
      to strip off field markup, boosts, ranges, etc. but it is not guaranteed to match an exact parse from the query parser.

      Optional, defaults to solr.SpellingQueryConverter
    -->
    <queryConverter name="queryConverter" class="solr.SpellingQueryConverter"/>

    <!--  Add to a RequestHandler
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    NOTE:  YOU LIKELY DO NOT WANT A SEPARATE REQUEST HANDLER FOR THIS COMPONENT.  THIS IS DONE HERE SOLELY FOR
    THE SIMPLICITY OF THE EXAMPLE.  YOU WILL LIKELY WANT TO BIND THE COMPONENT TO THE /select STANDARD REQUEST HANDLER.
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    -->


    <requestHandler name="/spellCheckCompRH" class="solr.SearchHandler">
        <lst name="defaults">
            <!-- Optional, must match spell checker's name as defined above, defaults to "default" -->
            <str name="spellcheck.dictionary">default</str>
            <!-- omp = Only More Popular -->
            <str name="spellcheck.onlyMorePopular">false</str>
            <!-- exr = Extended Results -->
            <str name="spellcheck.extendedResults">false</str>
            <!--  The number of suggestions to return -->
            <str name="spellcheck.count">1</str>
        </lst>
        <!--  Add to a RequestHandler
        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        REPEAT NOTE:  YOU LIKELY DO NOT WANT A SEPARATE REQUEST HANDLER FOR THIS COMPONENT.  THIS IS DONE HERE SOLELY FOR
        THE SIMPLICITY OF THE EXAMPLE.  YOU WILL LIKELY WANT TO BIND THE COMPONENT TO THE /select STANDARD REQUEST HANDLER.
        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        -->
        <arr name="last-components">
            <str>spellcheck</str>
        </arr>
    </requestHandler>
</config>

